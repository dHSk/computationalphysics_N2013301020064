from pylab import *
import os
import math

g = 9.8
b2m = 1e-5
i = 0
j = 0
a_vx = []
a_vy = []
a_x = []
a_x0 = []
ang = 0
init_velocity_x = []  
init_velocity_y = []   

class flight_state:
    def __init__(self, _x = 0, _y = 0, _vx = 0, _vy = 0, _t = 0):
        self.x = _x
        self.y = _y
        self.vx = _vx
        self.vy = _vy
        self.t = _t

class adiabatic_drag_cannon:
    def __init__(self, _fs = flight_state(0, 0, 0, 0, 0), _dt = 0.1):
        global a_vx, a_vy
        self.adiabatic_drag_cannon_flight_state = []
        self.adiabatic_drag_cannon_flight_state.append(_fs)
        self.dt = _dt
        a_vx.append(self.adiabatic_drag_cannon_flight_state[-1].vx)
        a_vy.append(self.adiabatic_drag_cannon_flight_state[-1].vy)
        
    def next_state(self, current_state):
        global g, b2m
        y0 = 1e4
        next_B = b2m/exp(current_state.y/y0)
        v = sqrt(current_state.vx * current_state.vx + current_state.vy * current_state.vy)
        next_x = current_state.x + current_state.vx * self.dt
        next_vx = current_state.vx - next_B * v * current_state.vx * self.dt
        next_y = current_state.y + current_state.vy * self.dt
        next_vy = current_state.vy - g * self.dt - next_B * v * current_state.vy * self.dt
        return flight_state(next_x, next_y, next_vx, next_vy, current_state.t + self.dt)

    def shoot(self):
        while not(self.adiabatic_drag_cannon_flight_state[-1].y < 0):
            self.adiabatic_drag_cannon_flight_state.append(self.next_state(self.adiabatic_drag_cannon_flight_state[-1]))
            
        r = - self.adiabatic_drag_cannon_flight_state[-2].y / self.adiabatic_drag_cannon_flight_state[-1].y
        self.adiabatic_drag_cannon_flight_state[-1].x = (self.adiabatic_drag_cannon_flight_state[-2].x + r * self.adiabatic_drag_cannon_flight_state[-1].x) / (r + 1)
        self.adiabatic_drag_cannon_flight_state[-1].y = 0

    def show_trajectory(self):
        global a
        x = []
        y = []
        for fs in self.adiabatic_drag_cannon_flight_state:
            x.append(fs.x)
            y.append(fs.y)
        a_x.append(x[-1])
        
class target_site:
    def __init__(self, _x, _y):
        self.x = _x
        self.y = _y
       
class precise_strike:
    def __init__(self, _ts = target_site(0, 0)):
        self.precise_strike_target_site = []
        self.precise_strike_target_site.append(_ts)
         
    def site(self):
        input = raw_input('x-coordinate of the site(y=0): ')
        site_x = input
        return target_site(site_x, 0)
        
    def find_v(self):
        global i,j,init_velocity
        self.precise_strike_target_site.append(self.site())
        while i < 200:
            j = i
            a = adiabatic_drag_cannon(flight_state(0, 0, 100, j, 0), _dt = 0.1)
            a.shoot()
            a.show_trajectory()
            show()
            os.system('cls')
            d = float(self.precise_strike_target_site[-1].x) - float(a_x[-1])
            if abs(d) < 100:
                init_velocity_x.append(a_vx[-1])
                init_velocity_y.append(a_vy[-1])
                a_x0.append(a_x[-1])
            else:
                pass
            i = i + 1
            
    def find_init(self):
        k = 0
        while k < len(init_velocity_x):
            ang = math.atan(float(init_velocity_y[k]) / float(init_velocity_x[k]))
            print init_velocity_x[k], init_velocity_y[k], a_x0[k], ang
            k = k + 1
    
b = precise_strike(target_site(0, 0))
b.find_v()
b.find_init()
